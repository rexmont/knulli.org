{"config":{"lang":["en","es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-knulli-wiki","title":"Welcome to KNULLI Wiki","text":"<p>KNULLI is a custom firmware for retro gaming devices (handhelds, bartops, etc.). It's developed as a fork of Batocera. It tries to provide support for devices that fall under at least one of these categories:</p> <ul> <li>There are no open source kernel and/or u-boot sources available</li> <li>There are sources, but the kernel is either not mainline, and/or too old (e.g. devices with a BSP kernel 3.4 like the Egret II Mini)</li> <li>There is no GPU support or the gpu is not supported, so framebuffer is the only option</li> <li>It's a device that I own and have decided to build a CFW for it</li> </ul>"},{"location":"#features","title":"Features","text":"<p>KNULLI supports devices with GPU (GLES support) and framebuffer only (legacy).</p> <ul> <li>Emulation Station frontend for GPU based devices</li> <li>Simplemenu/Simplermenu+ for framebuffer only devices (also for GPU ones if preferred)</li> <li>RetroArch plus multiple libretro cores</li> <li>Wireless and Bluetooth support (including audio) when supported by the device</li> <li>Support for external USB wireless for those without internal wireless card</li> <li>Retroachivements</li> <li>Netplay</li> <li>Cover art/thumbnail scrapper support</li> </ul>"},{"location":"#community","title":"Community","text":"<p>KNULLI uses Discord and  GitHub discussion pages for discussion, it you would like to join us plesae use this link:  Discord</p>"},{"location":"#licenses","title":"Licenses","text":"<p>KNULLI is a Linux distribution that is made up of many open-source components.  Components are provided under their respective licenses.  This distribution includes components licensed for non-commercial use only.</p>"},{"location":"#bundled-works","title":"Bundled Works","text":"<p>All other software is provided under each component's respective license.  These licenses can be found in the software sources or in this project's licenses folder.  Modifications to bundled software and scripts by the KNULLI team are licensed under the terms of the software being modified.</p>"},{"location":"#binary-kernels-and-bootloaders","title":"Binary kernels and bootloaders","text":"<p>The releases for some devices include kernels and/or bootloaders that don't have source code available because the manufacturer has not published them. In those cases the device specific page includes instructions to extract those from the stock firmware.</p>"},{"location":"#credits","title":"Credits","text":"<p>This project is not the work of one person but it is the work of many persons all over the world who have developed the open source bits without which this project could not exist.  Special thanks to Batocera, muOS, JelOS, CoreELEC, LibreELEC, and to developers and contributors across the open source community.</p>"},{"location":"devices/","title":"Device Support","text":"<p>KNULLI supports a variety of ARM based devices.</p> <p>There are two main categories, those that have GPU support and include Emulation Station as their main interface, and others that are currently framebuffer based only (legacy) that typically use Simplemenu as the main interface.</p>"},{"location":"devices/#gpu-supported-devices","title":"GPU supported devices","text":"Manufacturer Device CPU / Architecture Kernel GL driver Interface Anbernic RG35xx Original Actions Semi 7039 (ARM) Actions BSP 4.7.190 PowerVR SGX544 fbdev + Emulation Station / Simplemenu Anbernic RG35XX Plus Allwinner H700 (ARM) Allwinner BSP 4.9.170 Mali G31 fbdev + Emulation Station Anbernic RG35XX H Allwinner H700 (ARM) Allwinner BSP 4.9.170 Mali G31 fbdev + Emulation Station Anbernic RG35XX 2024 Allwinner H700 (ARM) Allwinner BSP 4.9.170 Mali G31 fbdev + Emulation Station Orange Pi Orange Pi Zero 2w Allwinner H618 / Mali G31 (ARMv8-A) Mainline Linux Panfrost Weston + Emulation Station Powkiddy Powkiddy A12 Rockchip RK3128 / Mali 400 MP4 (ARMv7-A) Rockchip BSP 4.4 Mali Weston + Emulation Station Powkiddy Powkiddy A13 Rockchip RK3128 / Mali 400 MP4 (ARMv7-A) Rockchip BSP 4.4 Mali Weston + Emulation Station Powkiddy RGB30 Rockchip RK3566 (ARM) Rockchip BSP 4.19 Mali KMS/DRM + Emulation Station Sega Astro City Mini Allwinner R16 / Mali 400 MP4 (ARMv7-A) Allwinner BSP 4.0 Mali fbdev + Emulationstation SJGAM M16 Rockchip RK3126 / Mali 400 MP4 (ARMv7-A) Rockchip BSP 4.4 Mali Weston + Emulation Station Taito Egret II Mini Allwinner R16 / Mali 400 MP4 (ARMv7-A) Allwinner BSP 4.0 Mali fbdev + Emulationstation Unbranded PocketGo S30 Allwinner A33 / Mali 400 MP4 (ARMv7-A) Allwinner BSP 4.4 Mali fbdev + Emulation Station"},{"location":"devices/#legacy-devices","title":"Legacy devices","text":"Manufacturer Device CPU / Architecture Kernel GL driver Interface Capcom Retro Station Tron Actions Semi 7051 (ARM) Actions Semi BSP 3.0.8 framebuffer only RetroArch + Simplemenu Powkiddy x51 Actions Semi 7051 Actions BSP 3.4 PowerVR SGX544 (disabled) fbdev + Simplemenu Unico Neo Geo Mini Actions Semi (MIPS) Actions Semi BSP 3.0.8 framebuffer only RetroArch + Simplemenu Unico Arcade Stick Pro Actions Semi 7051 (ARM) Actions Semi BSP 3.0.8 framebuffer only RetroArch + Simplemenu Unico MVSX Actions Semi 7051 (ARM)) Actions Semi BSP 3.0.8 framebuffer only RetroArch + Simplemenu"},{"location":"devices/anbernic/rg35xx-plus/","title":"Anbernic RG35XX Plus","text":""},{"location":"devices/anbernic/rg35xx-plus/#overview","title":"Overview","text":"Device CPU / Architecture Kernel GL driver Interface RG35xx Plus Allwinner H700 (ARM) Allwinner BSP 4.9.170 Mali G31 Emulation Station <p>The RG35XX Plus distribution includes a bootloader, u-boot, and kernel in binary form extracted from the stock firmware. There are no public sources provided by anbernic for those</p>"},{"location":"devices/anbernic/rg35xx-plus/#extracting-the-kernel-and-bootloader","title":"Extracting the kernel and bootloader","text":"<p>Anbernic has not published the source code of the u-boot and kernel of the RG35xx Plus. In order to have a working configuration you have two options:</p> <ul> <li>You can use the stock kernel, bootloader, and u-boot from the stock SDCARD. See below for instructions on how to extract those. </li> <li>You can compile the included kernel with the source code of this distribution, however, note that there will be a few elements that are missing</li> </ul> <p>The firwmare included in releases uses the kernel, bootloader, and u-boot from the stock firmware.</p> <p>You can read this page to learn how to extract the bootloader, u-boot, and kernel from the stock firmware.</p>"},{"location":"devices/anbernic/rg35xx-plus/#features","title":"Features","text":"<ul> <li>Wireless</li> <li>Bluetooth</li> <li>Suspend (briefly press power button)</li> <li>HDMI</li> <li>Dual frontend: choose between Emulation Station or Simplemenu</li> <li>Wireless support with compatible USB-Wifi dongles</li> </ul>"},{"location":"devices/anbernic/rg35xx-plus/#notes","title":"Notes","text":""},{"location":"devices/anbernic/rg35xx-plus/#installation","title":"Installation","text":"<p>Download the latest <code>RG35XX</code> version of KNULLI from the button below and follow the instructions listed on the Install page.</p>"},{"location":"devices/anbernic/rg35xx/","title":"Anbernic RG35XX (Original)","text":""},{"location":"devices/anbernic/rg35xx/#overview","title":"Overview","text":"Device CPU / Architecture Kernel GL driver Interface RG35xx Original Actions Semi 7039 (ARM) Actions Semi BSP 4.9.170 pvrsrvkm Emulation Station / Simplemenu <p>The RG35XX distribution includes a bootloader, u-boot, and kernel in binary form extracted from the stock firmware. There are no public sources provided by anbernic for those</p>"},{"location":"devices/anbernic/rg35xx/#extracting-the-kernel-and-bootloader","title":"Extracting the kernel and bootloader","text":"<p>Anbernic has not published the source code of the u-boot and kernel of the RG35xx (original). In order to have a working configuration you have two options:</p> <ul> <li>You can use the stock kernel, bootloader, and u-boot from the stock SDCARD. See below for instructions on how to extract those. </li> <li>You can compile the included kernel with the source code of this distribution, however, note that there will be a few elements that are missing</li> </ul> <p>The firwmare included in releases uses the kernel, bootloader, and u-boot from the stock firmware.</p>"},{"location":"devices/anbernic/rg35xx/#features","title":"Features","text":"<ul> <li>Suspend (briefly press power button)</li> <li>HDMI</li> <li>Dual frontend: choose between Emulation Station or Simplemenu</li> <li>Wireless support with compatible USB-Wifi dongles</li> </ul>"},{"location":"devices/anbernic/rg35xx/#notes","title":"Notes","text":""},{"location":"devices/anbernic/rg35xx/#installation","title":"Installation","text":"<p>Download the latest <code>RG35XX</code> version of KNULLI from the button below and follow the instructions listed on the Install page.</p>"},{"location":"devices/orange-pi/orange-pi-zero-2w/","title":"Orange Pi 5","text":""},{"location":"devices/orange-pi/orange-pi-zero-2w/#overview","title":"Overview","text":"Device CPU / Architecture Kernel GL driver Interface Orange Pi Zero 2w Allwinner H618 / Mali G31 (ARMv8-A) Mainline Linux Panfrost Weston + Emulation Station"},{"location":"devices/orange-pi/orange-pi-zero-2w/#notes","title":"Notes","text":""},{"location":"devices/orange-pi/orange-pi-zero-2w/#installation","title":"Installation","text":"<p>TBC</p>"},{"location":"devices/orange-pi/orange-pi-zero-2w/#additional-references","title":"Additional References","text":"<p>TBC</p>"},{"location":"devices/orange-pi/orange-pi-zero-2w/#community-videos","title":"Community Videos","text":""},{"location":"devices/powkiddy/rgb30/","title":"Powkiddy RGB30","text":""},{"location":"devices/powkiddy/rgb30/#overview","title":"Overview","text":"Device CPU / Architecture Kernel GL driver Interface RGB30 Rockchip RK3566 (ARM) Rockchip BSP 4.19 Mali KMS/DRM + Emulation Station"},{"location":"devices/powkiddy/rgb30/#features","title":"Features","text":"Feature\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Notes  Storage KNULLI can be run from an SD Card and an second SD card can be used to store games  Wifi Can be turned on in Emulation Station under Main Menu &gt; Network Settings  Bluetooth Supports bluetooth audio and controllers  LED Supports selecting from a set of colors or turning the power LED off (choice persists through reboots)  Does not support other effects."},{"location":"devices/powkiddy/rgb30/#controls","title":"Controls","text":""},{"location":"devices/powkiddy/rgb30/#retroarch-hotkeys","title":"RetroArch Hotkeys","text":"Button Combo Action SELECT+START <sup>(x2)</sup> Quit Game SELECT+R1 Save State SELECT+L1 Load State SELECT+Y(NORTH) Open RA Menu SELECT+X(WEST) Show FPS SELECT+R2 Fast-Forward"},{"location":"devices/powkiddy/rgb30/#notes","title":"Notes:","text":"<ul> <li>By default KNULLI will detect your controller and configure RetroArch hotkeys automatically. This is controlled by the \"AUTOCONFIGURE RETROARCH HOTKEYS\" option in the <code>Settings &gt; Controller &amp; Bluetooth</code> menu. While the option is enabled, RetroArch hotkeys will be overwritten by the above defaults each time RetroArch is launched. If this behavior is not desired that option can be disabled and your user-defined RetroArch hotkeys will be used instead.</li> </ul>"},{"location":"devices/powkiddy/rgb30/#mednafen-hotkeys","title":"Mednafen Hotkeys","text":"Button Combo Action SELECT+START <sup>(hold for 2sec)</sup> Quit Game SELECT+R1 Save State SELECT+L1 <sup>(hold for 2sec)</sup> Load State SELECT+X(WEST) Show FPS SELECT+R2 Fast-Forward THUMBR+L1 Select disc THUMBR+R1 Eject/Insert disc THUMBR+D-Pad Left Decrease save slot by 1 THUMBR+D-Pad Right Increase save slot by 1 THUMBR+L2 Configure buttons on virtual port 1"},{"location":"devices/powkiddy/rgb30/#notes_1","title":"Notes:","text":"<ul> <li>By default KNULLI will expand the configuration file according to the first controller mednafen finds. This only happens when the config file doesn't exist (meaning the first time or if you manually delete it). After the initial expansion you are free to customize the controls.</li> </ul>"},{"location":"devices/powkiddy/rgb30/#mupen64plus-sa-nintendo-64","title":"Mupen64Plus-SA (Nintendo 64)","text":"Button Combo Action START Start B(EAST) A X(WEST) B Right Analog Up C Up Right Analog Down C Down Right Analog Left C Left Right Analog Right C Right L2 Z L1 L R1 R SELECT+START Quit Game SELECT+R1 Save State SELECT+L1 Load State SELECT+X(WEST) Take Screenshot SELECT+A(SOUTH) Reset Game"},{"location":"devices/powkiddy/rgb30/#notes_2","title":"Notes:","text":"<ul> <li>Z and L button assignment can be changed directly in EmulationStation<ul> <li>Highlight the game and press Y(NORTH)</li> <li>Select <code>ADVANCED GAME OPTIONS</code></li> <li>Set <code>EMULATOR</code> to <code>MUPEN64PLUSSA</code></li> <li>Then change <code>INPUT ONFIGURATION</code><ul> <li>Default: L1 = L, L2 = Z</li> <li>Z &amp; L SWAP: L1 = Z, L2 = L</li> </ul> </li> </ul> </li> <li>You can also create your own custom controller configuration and add it to <code>/storage/.configs/game/configs/mupen64plussa</code>.  Then update <code>INPUT CONFIGURATION</code> to <code>CUSTOM</code> following the same steps as above.</li> </ul>"},{"location":"devices/powkiddy/rgb30/#ppsspp-sa-psp","title":"PPSSPP-SA (PSP)","text":"Button Combo Action START Start SELECT Select A(SOUTH) Circle B(EAST) Cross X(NORTH) Triangle Y(WEST) Square L1 L R1 R R2 Save State L2 Load State R3 Open Menu"},{"location":"devices/powkiddy/rgb30/#hypseus-singe-daphne","title":"Hypseus-singe (Daphne)","text":"Button Combo Action SELECT+START Quit Game SELECT Coin START Start A(SOUTH) Button 1 B(EAST) Button 2 Y(NORTH) Button 3"},{"location":"devices/powkiddy/rgb30/#notes_3","title":"Notes:","text":"<ul> <li>To add/change mapping you can edit <code>/storage/.config/game/configs/hypseus/hypinput.ini</code> under <code>[KEYBOARD]</code> section by changing third number for a function from <code>0</code> (disabled) to a corresponding joystick value.  You can identify joystick values by running <code>jstest /dev/input/js0</code> over ssh.</li> <li> <p>For example the following would assign <code>quit</code> to L1 and <code>pause</code> to R1</p> <pre><code>[KEYBOARD]\nKEY_QUIT = SDLK_ESCAPE 0 5\nKEY_PAUSE = SDLK_p 0 6\n</code></pre> </li> </ul>"},{"location":"devices/powkiddy/rgb30/#global-hotkeys","title":"Global Hotkeys","text":"Button Combo Action SELECT+Vol + Brightness Up SELECT+Vol - Brightness Down START+Vol + Battery Status START+Vol - WIFI Toggle"},{"location":"devices/powkiddy/rgb30/#hdmi-output","title":"HDMI Output","text":"<p>These instruction only work for aarm64 devices.  This is not implemented for x86_64 devices.</p> <p>Press L1 + START + SELECT while in EmulationStation to swtich between Screen and HDMI output. </p> <p>While this should work; it doesn't always result in the correct resolution. The best way to get consistent results is to turn off the device, plug in an HDMI cable and reboot.  </p> <p>\"Why doesn't hot-plugging just work?\"... Hot-plug HDMI switching is a fairly complex action to accomplish and not something we have implemented on any device.  If you are a developer and interested in helping to build this functionality please start here: Contribute</p>"},{"location":"devices/powkiddy/rgb30/#emulators","title":"Emulators","text":"<ul> <li>Platform Documentation (RK3566)</li> </ul>"},{"location":"devices/powkiddy/rgb30/#notes_4","title":"Notes","text":""},{"location":"devices/powkiddy/rgb30/#installation","title":"Installation","text":""},{"location":"devices/powkiddy/rgb30/#video-guide","title":"Video Guide","text":"<p>Courtesy of @RetroGameCorps</p> <p>Download the latest <code>RK3566</code> version of KNULLI from the button below and follow the instructions listed on the Install page.  Insert the SD card into the TF-OS slot of the device and power it on.</p> <p> </p>"},{"location":"devices/powkiddy/rgb30/#community-videos","title":"Community Videos","text":""},{"location":"guides/A133-firmware-extract/","title":"Allwinner A133 Firmware extraction","text":"<p>The following page describes how to extract the bootloader, u-boot, and kernel from an Allwinner A133 based device. This currently only applies to the TrimUI Smart Pro console.</p>"},{"location":"guides/A133-firmware-extract/#obtaining-the-stock-firmware","title":"Obtaining the stock firmware","text":"<p>You can download the stock firmware from GitHub</p>"},{"location":"guides/h700-firmware-extract/","title":"Allwinner H700 Firmware extraction","text":"<p>The following page describes how to extract the bootloader, u-boot, and kernel from an Allwinner H700 based device. The following devices are based on this processor and these instructions are valid for all of them:</p> <ul> <li>RG35xx Plus</li> <li>RG35xx H</li> <li>RG35xx 2024</li> </ul>"},{"location":"guides/h700-firmware-extract/#tools-and-repositories-required","title":"Tools and repositories required","text":"<ul> <li>android unpackbootimg to unpack/pack and create boot.img</li> <li>OrangePi Build includes all the necessary tools for repackaging the boot-package (u-boot)</li> <li>OpenixCard to extract the stock firmware image (in AWIMAGE format)</li> </ul>"},{"location":"guides/h700-firmware-extract/#firmware-building-blocks","title":"Firmware building blocks","text":"<p>There are four different blocks that are required for the Allwinner H700 BSP to work.</p>"},{"location":"guides/h700-firmware-extract/#boot0","title":"Boot0","text":"<p>The Boot0 is the secondary program-loader, and it's loaded by the BROM during the boot-process. You can read more about this in the linux sunxi boot0 page</p> <p>The typical location of this boot0 is either on position 8KB or 256KB. Stock uses 8KB position</p> <p>The boot0 has the following signature:</p> <pre><code>00000000  be 04 00 ea 65 47 4f 4e  2e 42 54 30 a7 f4 1c 31  |....eGON.BT0...1|\n00000010  00 00 01 00 30 00 00 00  00 00 00 00 00 00 02 00  |....0...........|\n00000020  00 00 02 00 00 00 00 00  00 00 00 00 34 2e 30 00  |............4.0.|\n00000030  00 00 00 00 03 00 00 00  a0 02 00 00 08 00 00 00  |................|\n00000040  08 08 08 08 0e 0e 0e 0e  0e 0e 00 00 bb bb 87 78  |...............x|\n00000050  0a 31 00 00 00 00 00 00  00 00 00 00 34 00 00 00  |.1..........4...|\n00000060  1b 00 00 00 33 00 00 00  03 00 00 00 00 00 00 00  |....3...........|\n00000070  00 00 00 00 04 00 00 00  72 00 00 00 00 00 00 00  |........r.......|\n00000080  09 00 00 00 00 00 00 00  00 00 00 00 24 00 00 00  |............$...|\n00000090  00 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|\n000000a0  80 80 80 40 33 66 2f 40  00 00 00 00 00 00 00 00  |...@3f/@........|\n000000b0  60 0c 00 02 00 00 00 00  00 00 00 00 08 00 02 01  |`...............|\n000000c0  ff ff 00 00 08 01 02 01  ff ff 00 00 01 00 00 00  |................|\n000000d0  08 09 03 ff ff ff 00 00  08 0a 03 ff ff ff 00 00  |................|\n000000e0  08 0b 03 ff ff ff 00 00  08 0c 03 ff ff ff 00 00  |................|\n000000f0  00 52 41 57 85 e9 00 00  06 02 02 01 03 ff 00 00  |.RAW............|\n00000100  06 03 02 01 03 ff 00 00  06 01 02 01 03 ff 00 00  |................|\n00000110  06 00 02 01 03 ff 00 00  06 05 02 01 03 ff 00 00  |................|\n00000120  06 04 02 01 03 ff 00 00  00 00 00 00 00 00 00 00  |................|\n00000130  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n[...]\n</code></pre>"},{"location":"guides/h700-firmware-extract/#boot-package","title":"Boot package","text":"<p>Boot package contains the u-boot and the device tree (DT) of the device. The boot package is located at an offset of 16,400 KB.</p> <p>The boot package has the following signature:</p> <pre><code>00000000  73 75 6e 78 69 2d 70 61  63 6b 61 67 65 00 00 00  |sunxi-package...|\n00000010  00 98 11 89 a1 de f6 b7  00 00 00 00 00 00 00 00  |................|\n00000020  04 00 00 00 00 00 14 00  00 00 00 00 00 00 00 00  |................|\n00000030  00 00 00 00 00 00 00 00  00 00 00 00 4d 49 45 3b  |............MIE;|\n00000040  75 2d 62 6f 6f 74 00 00  00 00 00 00 00 00 00 00  |u-boot..........|\n00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000080  00 08 00 00 00 00 10 00  00 00 00 00 03 00 00 00  |................|\n00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n000001a0  00 00 00 00 00 00 00 00  00 00 00 00 49 49 45 3b  |............IIE;|\n000001b0  6d 6f 6e 69 74 6f 72 00  00 00 00 00 00 00 00 00  |monitor.........|\n000001c0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n000001f0  00 08 10 00 d0 a2 01 00  00 00 00 00 03 00 00 00  |................|\n00000200  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000310  00 00 00 00 00 00 00 00  00 00 00 00 49 49 45 3b  |............IIE;|\n00000320  64 74 62 6f 00 00 00 00  00 00 00 00 00 00 00 00  |dtbo............|\n00000330  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000360  00 ac 11 00 20 09 00 00  00 00 00 00 03 00 00 00  |.... ...........|\n00000370  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000480  00 00 00 00 00 00 00 00  00 00 00 00 49 49 45 3b  |............IIE;|\n00000490  64 74 62 00 00 00 00 00  00 00 00 00 00 00 00 00  |dtb.............|\n000004a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n000004d0  00 b8 11 00 00 34 02 00  00 00 00 00 03 00 00 00  |.....4..........|\n000004e0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n000005f0  00 00 00 00 00 00 00 00  00 00 00 00 49 49 45 3b  |............IIE;|\n00000600  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n[...]\n</code></pre> <p>The u-boot is included in the boot-package.fex image</p>"},{"location":"guides/h700-firmware-extract/#boot-image","title":"Boot Image","text":"<p>Contains the kernel, ramdisk, and bootargs.</p> <p>The boot.img goes into the first partition of the sdcard with an offset 36,864 KB.</p> <p>Boot.img follows an android boot image and can be unpacked (and packed again) with the android unpackbootimg</p> <p>To extract the boot.img to the folder <code>boot_image</code>:</p> <pre><code>$ unpackbootimg -i boot.img -o boot_image/\n\nBOARD_KERNEL_CMDLINE .BT0\nBOARD_KERNEL_BASE 645ee563\nBOARD_NAME  for boot0\n\nBOARD_PAGE_SIZE 1948279909\nBOARD_HASH_TYPE sha256\nBOARD_KERNEL_OFFSET 00008000\nBOARD_RAMDISK_OFFSET fd058b12\nBOARD_SECOND_OFFSET 9c087c09\nBOARD_TAGS_OFFSET 080a7c03\nBOARD_OS_VERSION 49.91.109\nBOARD_OS_PATCH_LEVEL 2070-12\nBOARD_DT_SIZE 1634541679\n</code></pre> <p>The following files will be extracted into the <code>boot_image</code> folder:</p> <pre><code>boot.img-base   boot.img-cmdline  boot.img-hash       boot.img-oslevel    \nboot.img-pagesize    boot.img-ramdiskoff  boot.img-secondoff  boot.img-zImage\nboot.img-board  boot.img-dtb      boot.img-kerneloff  boot.img-osversion  \nboot.img-ramdisk.gz  boot.img-second      boot.img-tagsoff\n</code></pre> <p>To repack the boot.img after doing any changes:</p> <pre><code>mkbootimg --kernel boot.img-zImage --ramdisk boot.img-ramdisk.gz --dt boot.img-dtb \\\n--board sun50i_arm64 --base 40078000 --kernel_offset 00008000 --ramdisk_offset 01f88000 \\\n--second_offset 00e88000 --tags_offset fff88100 --cmdline \"earlyprintk=ttyS0,115200 \nloglevel=8 initcall_debug=0 console=tty0 console=ttyS0,115200 rootwait root=/dev/mmcblk0p3 \ninit=/sbin/init\" -o updated_boot.img\n</code></pre>"},{"location":"guides/h700-firmware-extract/#env-image","title":"Env Image","text":"<p>Env image contains the environment variables used by u-boot. </p> <p>The image can be extracted just with <code>strings env.img &gt; env.txt</code>.</p> <p>The environment variables follow this format:</p> <pre><code>earlyprintk=sunxi-uart,0x05000000\ninitcall_debug=0\nconsole=ttyS0,115200\nnand_root=/dev/nand0p4\nmmc_root=/dev/mmcblk0p5\ninit=/init\nloglevel=4\nselinux=0\ncma=64M\nmac=\nwifi_mac=\nbt_mac=\nspecialstr=\nkeybox_list=hdcpkey,widevine\nsetargs_nand=setenv bootargs earlyprintk=${earlyprintk} initcall_debug=${initcall_debug} console=${console} loglevel=${loglevel} root=${nand_root} init=${init} partitions=${partitions} cma=${cma} snum=${snum} mac_addr=${mac} wifi_mac=${wifi_mac} bt_mac=${bt_mac} selinux=${selinux} specialstr=${specialstr} gpt=1\nsetargs_mmc=setenv  bootargs earlyprintk=${earlyprintk} initcall_debug=${initcall_debug} console=${console} loglevel=${loglevel} root=${mmc_root} rootwait init=${init} partitions=${partitions} cma=${cma} snum=${snum} mac_addr=${mac} wifi_mac=${wifi_mac} bt_mac=${bt_mac} selinux=${selinux} specialstr=${specialstr} gpt=1\nboot_normal=sunxi_flash read 45000000 boot;bootm 45000000\nboot_recovery=sunxi_flash read 45000000 recovery;bootm 45000000\nboot_fastboot=fastboot\nrecovery_key_value_max=0x13\nrecovery_key_value_min=0x10\nfastboot_key_value_max=0x8\nfastboot_key_value_min=0x2\nbootdelay=0\nbootcmd=run setargs_nand boot_normal\n</code></pre> <p>To convert a valid environment file (e.g. <code>env.cmd</code>) into an environment image you have to use the <code>mkenvimage</code> command:</p> <pre><code>mkenvimage -s 0x1000000 -o env.img env.txt \n</code></pre>"},{"location":"guides/h700-firmware-extract/#obtaining-the-stock-firmware","title":"Obtaining the stock firmware","text":"<p>There are three ways to obtain the stock firmware:</p> <ul> <li>Obtain the original recovery PhoenixCard image from Garlic 2.0 bootloader repo</li> <li>Use the SDCARD included with your device</li> <li>Download the firmware from Anbernic's website (working link as of 2024/04/16):<ul> <li>Note: download the 16GB firmware (e.g. <code>cxm_35xxh-en16gb-240330_2024-04-01_0402.zip</code>)</li> </ul> </li> </ul>"},{"location":"guides/h700-firmware-extract/#firmware-extraction","title":"Firmware extraction","text":"<p>This section describes the different methods to extract the firmware</p>"},{"location":"guides/h700-firmware-extract/#using-the-original-phoenixcard-firmware","title":"Using the original PhoenixCard firmware","text":"<p>The original recovery firmware image (<code>h700_linux_tv_uart0_20231108.zip</code>) was posted as part of the Garlic 2.0 development. That included the bootloader for the original RG35XX as well as the one for the RG53XX Plus. You can download it from here (original link from the GarlicOS bootloader GitHub repository)</p> <p>This firmware image can be extracted with several tools, but OpenixCard works well for these types of Allwinner firmware images.  With the image downloaded and OpenixCard tools installed, first extract the image from the archive:</p> <pre><code>$ unzip h700_linux_tv_uart0_20231108.zip\nArchive:  h700_linux_tv_uart0_20231108.zip\n  inflating: h700_linux_tv_uart0_20231108.img\n</code></pre> <p>Then run OpenixCard to extract the actual image:</p> <pre><code>$ OpenixCard -u h700_linux_tv_uart0_20231108.img\n _____             _     _____           _ \n|     |___ ___ ___|_|_ _|     |___ ___ _| |\n|  |  | . | -_|   | |_'_|   --| .'|  _| . |\n|_____|  _|___|_|_|_|_,_|_____|__,|_| |___|\n      |_| Version: 9ffafbb Commit: 1\nCopyright (c) 2022, YuzukiTsuru &lt;GloomyGhost@GloomyGhost.com&gt;\n\n[OpenixCard INFO] Converting input file: h700_linux_tv_uart0_20231108.img\n[OpenixIMG INFO] Decrypting IMG header...\n[OpenixIMG INFO] IMG version is: 0x300\n[OpenixIMG INFO] Decrypting IMG file contents...\n[OpenixIMG INFO] Writing the IMG config data...\n[OpenixCard INFO] Unpack Done! Your image file is at h700_linux_tv_uart0_20231108.img.dump\n</code></pre> <p>The image will be extracted to the <code>h700_linux_tv_uart0_20231108.img.dump</code> folder, and it should contain the following files:</p> <pre><code>arisc.fex     boot0_nand.fex    boot-resource.fex  dlinfo.fex  rootfs.fex      sunxi_mbr.fex      toc1.fex           usbtool.fex         vmlinux.fex\naultls32.fex  boot0_sdcard.fex  cardscript.fex     env.fex     split_xxxx.fex  sys_config.fex     u-boot-crash.fex   Vboot.fex           Vrootfs.fex\naultools.fex  boot.fex          cardtool.fex       fes1.fex    sunxi.fex       sys_partition.fex  u-boot.fex         Vboot-resource.fex\nboard.fex     boot_package.fex  config.fex         image.cfg   sunxi_gpt.fex   toc0.fex           usbtool_crash.fex  Venv.fex\n</code></pre> <p>From the files extracted you can identify the four files mentioned above:</p> <ol> <li>boot0_sdcard.fex is the boot0</li> <li>boot_package.fex is the boot package image</li> <li>boot-resource.fex is the boot.img</li> <li>env.fex is the env.img</li> </ol>"},{"location":"guides/h700-firmware-extract/#using-the-stock-sdcard-or-image","title":"Using the stock SDCARD or image","text":"<p>You can use the stock sdcard that came with your console, or download the image from anbernic's firmware page.</p> <p>This method requires to play with some offsets to get the correct boot0 and boot_package partitions.</p> <p>If you have the firmware image (RG35XXH-EN16GB-OS240330.IMG), then you can extract boot0 with the dd command:</p> <pre><code>$ dd if=RG35XXH-EN16GB-OS240330.IMG of=boot0.img bs=1024 skip=8 count=64\n</code></pre> <p>And for boot-package:</p> <pre><code>$ dd if=RG35XXH-EN16GB-OS240330.IMG of=boot_package.img bs=1024 skip=16400 count=20464\n</code></pre> <p>For boot.img and env.img, those are coming directly from partitions 1 and 2 of that image. To extract those, first run fdisk -l against the image:</p> <pre><code>$ fdisk -l RG35XXH-EN16GB-OS240330.IMG\nDisk RG35XXH-EN16GB-OS240330.IMG: 14.41 GiB, 15476981760 bytes, 30228480 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: gpt\nDisk identifier: AB6F3888-569A-4926-9668-80941DCB40BC\n\nDevice                          Start      End  Sectors  Size Type\nRG35XXH-EN16GB-OS240330.IMG1    73728  8880127  8806400  4.2G Microsoft basic data\nRG35XXH-EN16GB-OS240330.IMG2  8880128  8945663    65536   32M Microsoft basic data\nRG35XXH-EN16GB-OS240330.IMG3  8945664  8978431    32768   16M Microsoft basic data\nRG35XXH-EN16GB-OS240330.IMG4  8978432  9109503   131072   64M Microsoft basic data\nRG35XXH-EN16GB-OS240330.IMG5  9109504 25886719 16777216    8G Microsoft basic data\nRG35XXH-EN16GB-OS240330.IMG6 25886720 30226431  4339712  2.1G Microsoft basic data\n</code></pre> <p>Then extract partitions 1 and 2 with:</p> <pre><code>dd if=RG35XXH-EN16GB-OS240330.IMG of=boot.img bs=512 skip=73728 count=8806400\ndd if=RG35XXH-EN16GB-OS240330.IMG of=env.img bs=512 skip=8880128 count=8945663\n</code></pre> <p>If you use the SDCARD, just replace <code>RG35XXH-EN16GB-OS240330.IMG</code> with the device of your sdcard. In this example is /dev/sdh but you will need to identify the correct device.</p> <pre><code>$ sudo dd if=/dev/sdh of=boot0.img bs=1024 skip=8 count=64\n</code></pre> <p>And for boot-package:</p> <pre><code>$ sudo dd if=/dev/sdh of=boot_package.img bs=1024 skip=16400 count=20464\n</code></pre> <p>To extract the boot.img and env.img (partitions 1 and 2) we can just dump the sdcard partitions directly:</p> <pre><code>$ sudo dd if=/dev/sdh1 of=boot.img bs=1024\n$ sudo dd if=/dev/sdh2 of=env.img bs=1024\n</code></pre>"},{"location":"guides/h700-firmware-extract/#putting-everything-back-together","title":"Putting everything back together","text":"<p>Once you have the main elements (boot0.img, boot-package.img, boot.img, and env.img) you can reconstruct a working SDCARD:</p> <ul> <li>Create a new gpt based SDCARD with 4 partitions and make sure the first partition starts at block 73728.</li> <li>Flash the internal partitions boot0 and boot_package.img:</li> </ul> <pre><code>sudo dd if=boot0.img of=/dev/sdh bs=1024 seek=8\nsudo dd if=boot_package.img of=/dev/sdh bs=1024 seek=16400\n</code></pre> <ul> <li>Flash the boot.img and env.img</li> </ul> <pre><code>sudo dd if=boot.img of=/dev/sdh1 bs=1024\nsudo dd if=env.img of=/dev/sdh2 bs=1024\n</code></pre> <p>Partition 3 of the sdcard is boot-resource, that typically contains <code>bootlogo.bmp</code> that is the boot splash screen logo, as well as the rootfs in squashfs format (<code>boot/batocera</code>).</p>"},{"location":"play/add-games/","title":"Adding Games to KNULLI","text":"<p>KNULLI has a few options for adding games and the option you choose will depend on the device you have and its available functionality (For example, some devices do not have networking capabilites so those devices will not be able to use the network transfer option).  To create the default set of game directories on your device, choose the 'CREATE GAME DIRECTORIES' option in the System Settings menu.</p> <p>This page will aim to document all possible options and indicate when you might use a given one over another.</p> <p>For details on which specific files each system requires please see the corresponding pages in the systems section of this wiki.</p>"},{"location":"play/add-games/#storage-modes","title":"Storage Modes","text":"<p>KNULLI has support for using internal and external storage (microsd) for games.  To make games available in the OS we provide different features based on the capability of the filesystem that you are using.  To support our storage modes KNULLI nests games into a directory on your games card called \"roms\".  All games found in this path will be available in the OS.</p>"},{"location":"play/add-games/#merged-storage","title":"Merged Storage","text":"<p>When using a microsd that is formatted as Ext4 (Linux), KNULLI will present users with the ability to merge both the internal and external storage together allowing users to use both devices to store games.  This mode has two preferences, external (default), and internal.</p> <ul> <li>Preference External</li> <li>This mode will save anything written to <code>/userdata/roms</code> to your external microsd (<code>/userdata/games-external/roms</code>).</li> <li>Preference Internal</li> <li>This mode will save anything written to <code>/userdata/roms</code> to your internal storage (<code>/userdata/games-internal/roms</code>). </li> </ul> <p>Note: Merged Storage is disabled by default.</p>"},{"location":"play/add-games/#simple-storage","title":"Simple Storage","text":"<p>When Merged Storage is disabled, or when you are using ExFAT or FAT32, KNULLI will mount your external card to <code>/userdata/games-external</code> and make the content of <code>/userdata/games-external/roms</code> available at /userdata/roms.</p>"},{"location":"play/add-games/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>It is possible to create a conflict which will prevent games from being displayed in EmulationStation.  This can usually be resolved by executing <code>/usr/bin/cleanup_overlay</code>.  Note: This will reboot your device.</li> <li>If no game folders appear in /userdata/roms after running <code>CREATE GAME DIRECTORIES</code>, make sure you have a <code>roms</code> directory on your microsd.</li> </ul>"},{"location":"play/add-games/#option-1-network-transfer","title":"Option 1: Network Transfer","text":"<p>Network transfer can be used on any device that can connect to the internet (this includes devices with native networking capabilites and ones where networking can be added through an external dongle).</p> <p>This option first requires you to set up networking on your device.  Please see Networking for details.  Once you have completed those steps make note of your IP Address in the Network Settings menu.</p> <p>In addition to your IP you will also need your root password.  This can be found in the Main Menu by pressing START in EmulationStation and navigating to <code>System Settings</code>.  You will see your root password under the <code>Authentication</code> header.</p> <p>By default the root password is set up to rotate to a unique string of characters after every reboot. You can leave it like this and make note of the current password, or you can turn it off and set it to something that will persist.</p>"},{"location":"play/add-games/#http","title":"HTTP","text":"<p>Enabling Simple HTTP Server in Network settings lets you upload and download files by entering your device's IP address in any browser on the local network (or on VPN IP, see VPN section for details). The username is <code>root</code> and the password can be found in <code>Root Password</code> in the main menu.</p>"},{"location":"play/add-games/#smb","title":"SMB","text":"<ul> <li>Windows:<ul> <li>open a Windows Explorer window, and type in <code>\\\\[YOUR IP ADDRESS]</code>; replace <code>[YOUR IP ADDRESS]</code> with the IP Address seen in the Network Settings menu.</li> <li>You will be prompted for a username and password. </li> <li>The username is <code>root</code> and your password will be the value from <code>Root Password</code> in the System Settings menu.</li> </ul> </li> <li>MacOS: <ul> <li>open Finder and select <code>Go &gt; Connect to Server</code> from the top menu.</li> <li>In the address bar that appears, type <code>smb://[YOUR IP ADDRESS]</code>; replace <code>[YOUR IP ADDRESS]</code> with the IP Address seen in the Network Settings menu.</li> <li>You will be prompted for a username and password.</li> <li>For name enter <code>root</code> and your password will be the value from <code>Root Password</code> in the System Settings menu.</li> </ul> </li> </ul>"},{"location":"play/add-games/#ftp","title":"FTP","text":"<p>Using your FTP program of choice; set up an SFTP connection to the IP Address seen in the Network Settings menu.  Make sure the Port is set to <code>22</code>.  The username is <code>root</code> and your password will be the value from <code>Root Password</code> in the System Settings menu. </p>"},{"location":"play/add-games/#after-connecting","title":"After connecting","text":"<ul> <li>You will see a list of folders after you have connected via network.  </li> <li>Open the <code>roms</code> folder and you will see a list of folders where games and bios files can be placed. (Please see the systems section of the wiki for details on where each system's files should be placed)</li> <li>After you have added your games you can get them to display in EmulationStation by pressing START to open the Main Menu, then open <code>Game Settings</code> then select <code>Update Gamelists</code> under the Tools header.</li> </ul>"},{"location":"play/add-games/#option-2-sd-card","title":"Option 2: SD Card","text":"<p>Games can also be added via an SD card.  There are 2 primary methods for this depending on your device.</p>"},{"location":"play/add-games/#if-your-device-has-2-sd-card-slots","title":"If your device has 2 SD card slots","text":"<ul> <li>With your device turned off; insert a FAT32/ExFAT/ext4 formated SD card into slot 2 of your device.</li> <li>Turn your device on.</li> <li>When KNULLI completes its boot process, create your game directories by selecting the <code>Create Game Directories</code> option in <code>System Settings</code>.</li> <li>Now you can turn off your device, remove your SD card from slot 2 and open it on your PC.</li> <li>You PC will display a list of folders, open the <code>roms</code> directory and you will see a list of folders for each system where you can place your games and bios files.</li> <li>Add your games and place your SD card back into slot 2 and boot up KNULLI.</li> </ul> <p>If your device does not see your SD card (or write the needed folders to it) please open <code>System Settings</code> and make sure <code>Autodetect Games Card</code> is turned on (located under the Hardware/Storage header) then reboot your device.</p>"},{"location":"play/add-games/#if-your-device-has-1-sd-card-slot","title":"If your device has 1 SD card slot","text":"<p>This option is only for devices where you have installed KNULLI to the internal drive of the device. In this scenario an SD card can be used directly for storage</p> <ul> <li>With KNULLI installed to your internal drive press START to open the Main Menu, then open <code>System Settings</code> and turn on <code>Autodetect Games Card</code> under the Hardware/Storage header.</li> <li>Turn your device off</li> <li>Insert a FAT32/ExFAT/ext4 formated SD card into your device.</li> <li>Turn your device on</li> <li>When KNULLI completes its boot process, create your game directories by selecting the <code>Create Game Directories</code> option in <code>System Settings</code>.</li> <li>Now you can turn off your device, remove your SD card and open it on your PC.</li> <li>You PC will display a list of folders, open the <code>roms</code> directory and you will see a list of folders for each system where you can place your games and bios files.</li> <li>Add your games and place your SD card back into your device and boot up KNULLI.</li> </ul>"},{"location":"play/add-games/#option-3-external-usb-drive","title":"Option 3: External USB Drive","text":"<p>KNULLI has a built in File Manager and you can use it to access connected USB drives and transfer files. </p> <ol> <li>Connect your USB Drive to your device</li> <li>Open the Tools system and select File Manager</li> <li>Navigate up to <code>/</code> and then select <code>media</code> - you should see your drive listed after opening media</li> <li>Open your drive and you should see its contents</li> <li>From here you can navigate to the file(s) you would like to copy and then navigate back to the <code>userdata/roms</code> directory and paste your copied files in the approrpiate folder.</li> </ol>"},{"location":"play/add-games/#option-4-linux-os","title":"Option 4: Linux OS","text":"<p>KNULLI' storage drive is formated as ext4 which can be read natively by linux operating systems.  Plugging in your SD card into an linux OS will enable you to browse the directories and add files directly.</p>"},{"location":"play/controls/","title":"Controls","text":"<p>Controls documentation is being moved to device pages.  This work is not fully complete so there is chance you will not find controls documentation for your device just yet.  We're working on it  and will update this page when things are complete.</p>"},{"location":"play/install/","title":"Installing KNULLI","text":"<p>KNULLI is installed by downloading an image for your device, flashing it to an SD Card (or your device's internal storage) and then booting the device to start the install process.</p>"},{"location":"play/install/#step-1-download","title":"Step 1: Download","text":"<ul> <li>Download the latest version of KNULLI for your device from the releases page.<ul> <li>You'll find download links for each device/platform we support under the \"<code>Installation Package Downloads</code>\" header.</li> <li>Make sure to download the correct image for your device.  For example; if you are installing KNULLI on a RG35XX you would download the <code>rg35xx</code> image.</li> <li>If you have any questions you can check the Device Support section to confirm which image you should download for your specific device.</li> </ul> </li> </ul>"},{"location":"play/install/#step-2-flash","title":"Step 2: Flash","text":"<ul> <li>First decompress the image.</li> <li>Then write the image to an SD Card using an imaging tool.<ul> <li>Common imaging tools include Rufus, Balena, Raspberry Pi Imager, and Win32 Disk Imager.  If you're skilled with the command line, <code>dd</code> can also be used.</li> </ul> </li> </ul>"},{"location":"play/install/#step-3-boot-your-device","title":"Step 3: Boot your device","text":"<ul> <li>Insert your SD Card into your device while its off and then turn it on</li> <li>Note: Some devices may require you to set the boot order so your SD Card is loaded first.  Please see documentation for your specific device to see if this applies to you.</li> <li>KNULLI will run through its install process and then reboot your device after its complete.</li> <li>When your device reboots it will load directly into EmulationStation; at this point you are good to go!</li> </ul>"},{"location":"play/install/#additional-notes","title":"Additional Notes","text":"<ul> <li>KNULLI operating system is stored on an Ext4 partition that can be read by LINUX but is not natively readable on Windows. Currently it is not possible to access the primary KNULLI Ext4 partition on Windows to add games.</li> <li>On devices that support a second sd card, the sd card can be formatted as Ext4, FAT32, or exFAT. KNULLI will automatically detect the second SD card on boot and make it available as game storage.</li> <li>On x86 devices KNULLI includes an installation tool.  The installation tool can be found in the tools menu, which is one of the systems listed within ES.</li> </ul>"},{"location":"play/install/#next-steps","title":"Next Steps","text":"<ul> <li>Add Games</li> <li>Set up Networking</li> <li>Themes</li> </ul>"},{"location":"play/retro-achievements/","title":"Retro Achievements","text":"<p>KNULLI has a native integration with RetroAchievements which allows you to earn achievements as you play games across numerous emulators. In order to use RetroAchievements your device must be connected to the internet.</p>"},{"location":"play/retro-achievements/#setup","title":"Setup","text":"<ol> <li>Create an account at RetroAchievements.org.</li> <li>Follow the steps on the Networking page to connect your device to the internet.</li> <li>While in EmulationStation press START on your controller to open the Main Menu.</li> <li>Select <code>Game Settings</code> and then choose <code>RetroAchievement Settings</code>.</li> <li>Turn On RetroAchievements (first toggle).</li> <li>Then enter your username and password for RetroAchievements.org in the username and password fields.</li> </ol>"},{"location":"play/retro-achievements/#additional-notes","title":"Additional Notes","text":"<ul> <li>There are additional settings that can be changed in the above menu to tailor your experience.  Please see the documentation @ docs.retroachievements.org for details on each option<ul> <li>Recommended Settings:</li> <li>Unlock Sound (On): this plays the classic unlock sound each time an achievement is earned.</li> <li>Automatic Screenshot (On): this takes a screenshot each time an achievement is earned and stores it in the screenshots directory.  These can be viewed in the screenshots system in EmulationStation.</li> </ul> </li> <li>Not all emulators and games support RetroAchievements; please see the list of emulators that support achievements here and check if your game has achievements available by searching for it on RetroAchievements.org</li> <li>There is a change needed on the RetroAchievements API in order to be able to display to display your history of earned achievements in EmulationStation.  Once the needed change is made by RetroAchievements; we can look at renabling this functionality in EmulationStation.</li> </ul>"},{"location":"play/update/","title":"Updating KNULLI","text":"<p>KNULLI can be updated \"Over the Air\" (OTA) for those models with wireless or by manually downloading an update .tar file, adding to your device storage and rebooting.</p>"},{"location":"play/update/#option-1-ota-update","title":"Option 1: OTA Update","text":"<p>If your device has access to the internet you can update KNULLI directly from EmulationStation.</p> <ol> <li>In EmulationStation open the main menu by pressing the Start button on your controller.</li> <li>Select <code>System Settings</code></li> <li>Scroll to the <code>System Update</code> header and select <code>Start Update</code></li> </ol> <p>You can also view the change log for the latest release by selecting the <code>Change Log</code> before you update.</p>"},{"location":"play/update/#option-2-manual-update","title":"Option 2: Manual Update","text":"<p>If you device does not have access to the internet you can still update manually</p> <ol> <li>Download the latest update (.tar) of KNULLI for your device from the releases page.<ul> <li>You'll find download links for each device/platform we support under the \"<code>Update Package Downloads</code>\" header.</li> <li>Make sure to download the correct .tar file for your device. </li> <li>If you have any questions you can check the Device Support section to confirm which .tar you should download for your specific device.</li> </ul> </li> <li>Copy the update to your device's update share.</li> <li>Reboot the device, and the update will begin automatically.</li> </ol>"},{"location":"es/","title":"Inicio","text":""},{"location":"es/#bienvenido-a-la-wiki-de-knulli","title":"Bienvenido a la wiki de KNULLI","text":"<p>KNULLI es un firmware personalizado (custom firmware or CFW en ingl\u00e9s) para dispositivos de juegos retro (port\u00e1tiles, bartops, etc.). Se ha desarrollado como un \"fork\" de Batocera. Intenta proporcionar soporte para dispositivos que se encuentran en al menos una de estas categor\u00edas:</p> <ul> <li>No existen fuentes del kernel or del u-boot disponibles</li> <li>Existen fuentes disponibles, pero el kernel no est\u00e1 en linux mainline, y/o es demasiado antiguo (por ejemplo, dispositivos con un kernel BSP 3.4 como el Egret II Mini)</li> <li>No hay soporte para GPU o la GPU no es compatible, por lo que el framebuffer es la \u00fanica opci\u00f3n</li> <li>Es un dispositivo que tengo (en un caj\u00f3n) y he decidido hacerle un firmware para \u00e9l</li> </ul>"},{"location":"es/#caracteristicas","title":"Caracter\u00edsticas","text":"<p>KNULLI soporta dispostivos con GPU (soporte a trav\u00e9s de GLES) y aquellas que s\u00f3lo tienen framebuffer (legacy).</p> <ul> <li>Interfaz Emulation Station para dispositivos basados en GPU</li> <li>Simplemenu/Simplermenu+ para dispositivos solo de framebuffer (tambi\u00e9n para los de GPU si se prefiere)</li> <li>RetroArch m\u00e1s m\u00faltiples n\u00facleos libretro</li> <li>Soporte inal\u00e1mbrico y Bluetooth (incluido el audio) cuando el dispositivo lo soporta</li> <li>Soporte para USB inal\u00e1mbrico externo para aquellos sin tarjeta inal\u00e1mbrica interna</li> <li>Retroachivements</li> <li>Juego en red (Netplay)</li> <li>Soporte para raspador de car\u00e1tulas/miniaturas</li> </ul>"},{"location":"es/#comunidad","title":"Comunidad","text":"<p>KNULLI utiliza las p\u00e1ginas de discusi\u00f3n de Discord y  GitHub, si te gustar\u00eda unirte a nosotros por favor usa este enlace:  Discord</p>"},{"location":"es/#licencias","title":"Licencias","text":"<p>KNULLI es una distribuci\u00f3n de Linux que est\u00e1 compuesta por muchos componentes de c\u00f3digo abierto. Los componentes se proporcionan bajo sus respectivas licencias. Esta distribuci\u00f3n incluye componentes licenciados solo para uso no comercial.</p>"},{"location":"es/#kernels-y-bootloaders-en-formato-binario","title":"Kernels y bootloaders en formato binario","text":"<p>Las versiones liberadas para algunos dispositivos incluyen kernels y/o bootloaders que no tienen c\u00f3digo fuente disponible porque el fabricante no los ha publicado. En esos casos, la p\u00e1gina espec\u00edfica de cada dispositivo incluye instrucciones para extraerlos del firmware de f\u00e1brica (stock).</p>"},{"location":"es/#creditos","title":"Cr\u00e9ditos","text":"<p>Este proyecto no es el trabajo de una sola persona, sino el trabajo de muchas personas en todo el mundo que han desarrollado trocito a trocito de c\u00f3digo abierto sin los cuales este proyecto no podr\u00eda existir. Un agradecimiento especial a Batocera, muOS, JelOS, CoreELEC, LibreELEC, y a los desarrolladores y colaboradores de toda la comunidad de c\u00f3digo abierto.</p>"},{"location":"es/play/add-games/","title":"A\u00f1adir juegos a KNULLI","text":"<p>KNULLI has a few options for adding games and the option you choose will depend on the device you have and its available functionality (For example, some devices do not have networking capabilites so those devices will not be able to use the network transfer option).  To create the default set of game directories on your device, choose the 'CREATE GAME DIRECTORIES' option in the System Settings menu.</p> <p>This page will aim to document all possible options and indicate when you might use a given one over another.</p> <p>For details on which specific files each system requires please see the corresponding pages in the systems section of this wiki.</p>"}]}